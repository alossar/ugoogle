import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;

import HashFunction.HashFunction;

public class ConsistentHash<T> {

	/**
	 * La clase ConsistentHash define el comportamiento del cÌrculo que permitir√° determinar en d√≥nde se buscar√° la informaci√≥n asociada a las palabras de b√∫squeda
	 * ingresadas por el usuario. Esta estructura est√° formada por tres atributos: una instancia de la interfaz HashFunction, un n√∫mero de r√©plicas para los nodos
	 * y el circulo en s√≠ mismo, que se implementar√° mediante un TreeMap (para prop√≥sitos de utilizar b√∫squeda binaria).
	 */
	private final HashFunction hashFunction;
	private final int numberOfReplicas;
	// el circulo es representado como un mapa de enteros
	private final SortedMap<Integer, T> circle = new TreeMap<Integer, T>();

	/**
	 * En la construcci√≥n del ConsistentHashing se inicializan los atributos con los valores pasados por par√°metro, y se agregan los nodos que ser√°n parte del conjunto
	 * de servidores (shards) sobre los que se realizar√°n las b√∫squedas correspondientes. 
	 * En cuanto a las rÈplicas, hay un n˙mero definido para todos los servidores. Estas rÈplicas hacen las veces de nodos 
	 * virtuales, a los cuales se asignar· la misma IP del servidor real al cual hagan referencia.
	 * @param hashFunction
	 * @param numberOfReplicas
	 * @param nodes
	 */
	
	public ConsistentHash(HashFunction hashFunction, int numberOfReplicas,
			Collection<T> nodes) {

		this.hashFunction = hashFunction;
		this.numberOfReplicas = numberOfReplicas;

		for (T node : nodes) {
			add(node);
		}
	}
	// Agregar nodos es agregar un nuevo servidor, guardo el nodo para saber la
	// localizacion
	// de mi nuevo nodo
	
	/**
	 * En este m√©todo se ejecuta la edici√≥n de un nuevo nodo al conjunto de shards en los que se almacenar√° la informaci√≥n de la Base de Datos. A cada uno de los nodos se asocian cinco r√©plicas.
	 * Se utiliza el m√©todo put para este prop√≥sito, asociando a cada nodo los c√≥digos Hash de sus r√©plicas.
	 * @param node
	 */
	public void add(T node) {
		for (int i = 0; i < numberOfReplicas; i++) {
			circle.put(hashFunction.hash(node.toString() + i), node);
			System.out.println("hash del servidor "+node.toString() + i +" "+hashFunction.hash(node.toString()+i));
		}
		}
	/**
	 * En caso de que se necesite remover alg√∫n nodo del conjunto total de shards que se haya definido inicialmente. Para esto, se remueven del c√≠rculo todos los c√≥digos hash
	 * de las r√©plicas que previamente se hayan asignado a cada nodo. 
	 * @param node
	 */
		public void remove(T node) {
		for (int i = 0; i < numberOfReplicas; i++) {
			circle.remove(hashFunction.hash(node.toString() + i));
		}
		}
		/**
	 * Este m√©todo retorna el servidor donde se buscar√°n las URLs asociadas a la
	 * palabra clave ingresada (el par√°metro key aqu√≠ definido). Una vez se ha verificado
	 * que el c√≠rculo no est√° vac√≠o, se calcula el c√≥digo hash de la palabra clave y se compara
	 * este valor con cada uno de los c√≥digos hash que son claves en el TreeMap que representa el c√≠rculo. Si el c√≠rculo no contiene el c√≥digo hash
	 * de la palabra clave, entonces se intenta buscar objetos valor cuyo c√≥digo hash sea mayor al pasado por par√°metro. Para este prop√≥sito se hace uso 
	 * del m√©todo tailMap(hash), que retorna la porci√≥n del c√≠rculo que cumple con ese criterio. Sobre este c√≠rculo se obtiene entonces el hash m√°s cercano 
	 * al hash de la palabra clave. Finalmente se retorna el nodo asociado con el hash m√°s cercano. √âste nodo ser√° aquel donde se realizar√° la b√∫squeda requerida.
	 * @param key
	 * @return
	 */
	public T get(Object key) {
		if (circle.isEmpty()) {
			return null;
		}
		int hash = hashFunction.hash(key);
		if (!circle.containsKey(hash)) {
			SortedMap<Integer, T> tailMap = circle.tailMap(hash);
			//System.out.println(" llave 1  " + circle.tailMap(hash).firstKey() + "  Ultima llave  " + circle.tailMap(hash).lastKey());
			hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();
		}
		return circle.get(hash);
	}
}
